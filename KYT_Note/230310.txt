FName, FString, FText





FString : 배열형태로 문자열을 관리
	-> 문자열을 추가 확장 가능하다
		-> += TEXT("ABC"); 이런식으로
	-> 포인터 변수가 배열을 가리킴
		-> 공간이 부족하면 다시 배열을 할당
	-> FString은 문자열의 주소를 가지고 있음



FName : 문자열을 관리할 수 없다.
	-> FName 문자열을 저장하는 큰 테이블이 있고
	-> 동일한 문자열의 FName을 새로 생성한다면
		-> FName 테이블에 이미 있는 문자열을 가리킴


FString : 선언할때마다 다른 메모리를 할당
FName   : 같은 문자열은 같은 메모리를 가리킴


---------------------------------------------------------------------------------


따라서 문자열의 비교를 수행할때
	-> FString은 가리키는 주소가 다르기때문에
		-> 모든 문자열의 index마다 일일히 비교
	-> FName은 테이블에서 같은곳을 참조하는지만 확인하면 된다.
		-> 따라서 FName을 Key값으로 하면 매우 효율적!


그러나 문자열의 값을 자주 바군다면 FString이 더 나을 수 있다.



---------------------------------------------------------------------------------

FText : UMG에서 사용

	FText로 선언된 변수를 나라에 맞게 로컬라이징 할 수 있다.
	-> UI에 쓰는 문자열은 사용자에게 보여지므로 FText로 하는게 맞다.


	








---------------------------------------------------------------------------------
















---------------------------------------------------------------------------------
















---------------------------------------------------------------------------------
















---------------------------------------------------------------------------------
















---------------------------------------------------------------------------------
















---------------------------------------------------------------------------------
















---------------------------------------------------------------------------------
















---------------------------------------------------------------------------------
















---------------------------------------------------------------------------------
