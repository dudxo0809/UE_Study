캐릭터의 상태를 저장하기 위해?

	-> 현재 캐릭터의 상태 : PlayerStateClass에 지정	
	-> 그러나 이 PlayerState클래스 역시 새로 생성됨


2가지 방법 : 메모리를 이용 (메모리에 정보를 저장하고 생성할때 정보를 복사),
		하드디스크를 이용 (레벨을 넘어가기전에 파일에 저장된 정보를 읽어서 세팅)

	언리얼에서 지원하는 파일입출력이나, 
	자체 지원 Save, Load시스템을 사용하기


UUE11SaveGame* LoadGame = Cast<UUE11SaveGame>(UGameplayStatics::LoadGameFromSlot(TEXT("SaveSlot"), 0));

USaveGame을 상속받는 세이브게임 클래스에 로드





---------------------------------------------------------------------------------

언리얼 파일입출력



FPaths::

	// 언리얼의 엔진 폴더, 프로젝트 폴더 내의 각 디렉토리 경로를 내장 코드로 구현해놓음
	// Return FString type

	-> 플랫폼 별로 알아서 경로를 찾아주는 시스템



FArchive* 
	
	: ifstream, ofstream 과 같은 기능, 언리얼 전용



	FString FullPath = FPaths::ProjectSavedDir() + TEXT("SaveGames/Save.txt");

	TSharedPtr<FArchive> Writer = MakeShareable(IFileManager::Get().CreateFileWriter(*FullPath));

	if (Writer) {

		*Writer << mSaveGame->mPlayerInfo.ArmorPoint;
		*Writer << mSaveGame->mPlayerInfo.AttackDistance;
		*Writer << mSaveGame->mCameraZoomMax;
		*Writer << mSaveGame->mCameraZoomMin;

		Writer->Close();
	}

와 같이 사용가능


---------------------------------------------------------------------------------


이때 *Writer << 

 이후에 들어오는 값은 
	-> 언리얼 내장 타입 클래스, 변수라면 전부 입출력이 가능하다.
	-> but 사용자 정의 클래스는 x 
		-> 연산자 오버로딩이 안되어있기 때문



---------------------------------------------------------------------------------

언리얼 소켓시스템

	-> 언리얼 내장 통신시스템, 통신을 위한 수단
	-> 필수적으로 멀티스레드의 개념이 포함됨

build.cs에서

	"Networking",
	"Sockets"      추가


GameInfo.h에

	#include "Networking.h"
#include "Sockets.h"
#include "SocketSubsystem.h"
#include "HAL/Runnable.h"
#include "HAL/RunnableThread.h"

 추가



---------------------------------------------------------------------------------



NetWorkManager .cpp 추가

	-> 싱글톤으로 생성
	-> 상속 : None으로

	-> UObject가 없으므로 에디터에서 폴더가 보이지 않음


소켓은 두가지 방식 : 연결지향형 & 비연결지향형

	연결지향형 : 접속요청을 상대방이 수락하고 연결이 될때까지 통신x
			-> 연결이 되어있어야만 통신가능
			-> TCP : 데이터 손실이 없음

	비연결지향형
			-> 한쪽이 일방적으로 통신을 보낼 수 있음
			-> UDP : 데이터 손실의 위험이 있음
				-> UDP는 무조건 TCP보다 빠름


TCP는 UDP보다 느리지만 데이터 손실의 위험이 없음
UDP는 TCP보다 빠르지만 데이터 손실의 위험이 있음


---------------------------------------------------------------------------------


방장컴퓨터가 서버가 되는 방식
	-> UDP를 사용

그외에 대부분의 경우는 UDP사용하지 않음
	-> TCP 사용


IPv6 : IPv4 에 비해 더 긴 주소시스템






---------------------------------------------------------------------------------

mConnect가 되었다면 반드시 소켓을 닫아야함



우리가 설정한 패킷사이즈를 
	-> 프로토콜 4, 패킷사이즈 4, 나머지 바이트로 나눠서 사용할것이다.










---------------------------------------------------------------------------------
















---------------------------------------------------------------------------------
















---------------------------------------------------------------------------------
















---------------------------------------------------------------------------------
















---------------------------------------------------------------------------------
